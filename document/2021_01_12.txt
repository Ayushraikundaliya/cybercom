Hey! There?
-> Ayush this side ...

We will continue with javascript...


Notes to taken care

1. Javascript Engine is a program that executes javascript code.
2. Our code -> Paser --------------------> Conversion to Machine code ------------> Code Runs
		     Abstract Syntax tree			      Machine Code
	       ------------------------------------------------------------------------------
				All works are done on javascript engine

3. All Javascript code needs to run in an enviroment and this environment are called Execution Context.
   -> A box, a container or a wrapper which stores variables and in which a piece of our code is evaluated and executed.

4. When a javascript engine executes a script, it creates execution contexts.

5. Execution context has two phases : the creation phase and the execution phase.

6. When a script executes for the first time, the js engine creates a Gloabal Execution context.

Example : 

var x = 10;
function abc(a){
	return a*10;
}

var y = abc(x);
console.log(y);

The creation phase : the js engine stores the variables x and y and the function declaration abc() in the Gloabal Execution context.
		     It initializes the variables x and y to undefined.
		     1. Creation of variable object.
			-> Argument object is created, all the arguments passed in function.
			-> Code is scanned for function declarations: for each function a property is created in VO, pointing to that function.(Important point to note)|- Hoisting (Function and variable are hoisted in js)
			-> Code is scanned for variable declarations : for each variable a property is created in VO, and set to indefined,				|- Hoisting (which means they are available before execution)
							-> A difference between this two is that function gets defined in this phase but variable would be undefined.
Example on Hoisting : 

1. function age(year){
	console.log(2020 - year);
   }

   age(1998);

   output : 22 //common example what we generally do (function declaration)


2. age(1998);

   function age(year){
	console.log(2020 - year);
   }


   output : 22 // This is what hoisting is which means you can a function before declaring it.

3. var age = function(year){
	console.log(2020 - year);
   }

   age(1998);

   output : 22 //common example what we genrally do(function expression)

4. age(1998);
   
   var age = function(year){
	console.log(2020 - year);
   }

   output : Error //This is what hoisting is which means variable didn't get declared it stays undefined.


5. var age = 22;
   console.log(age);
  
   output : 22 

6. console.log(age);
   var age = 22;
   console.log(age);
  
   output : undefined 
	    22

7. console.log(age);

   output : Error //age is not declared

		     2. Cration of scope chain.
			-> Scoping means "where can we access certain variable?"
			-> Each new functions created a scope : In which the variable it defines are accessible.
			-> To create a scope we need to declare the function.(unlike other programming languagae - their we can use if,while,for but here only function will work)
			-> Lexical Scoping : means a variable defined outside a function can be accessible inside another function (function inside function)

		     3. Determine value of 'this' variable
			-> this is a window object.

The execution phase : the js engine executes the code line by line.
		      In this phase, it assigns values to variables and executes the function calls.
		      For every function call, the js engine creates a new Function Execution Context.
		      The Function execution context is similar to Global execution context, but instead of creating the global object.
		      It creates argument object that contains a reference to all the parrameter passed into the function.

To keep track of all execution context including the Global execution context and Function execution context, the js engine uses a data structure name call stack.


**Objects and Properties

To create an object:

var a = {
    firstName:'Ayush',
    lastName:'Raikundaliya',
    birthYear:1998,
    friend:[1,2,3,4],
    job:'software engineer'
};

or

var a = new object();
a.name = 'abc';
a.age = '55';


To add function inside an object:

var a = {
    firstName:'Ayush',
    lastName:'Raikundaliya',
    birthYear:1998,
    friend:[1,2,3,4],
    job:'software engineer',
    calcage: function(birthYear){
	this.age = 2020 - this.birthYear;
    }
};

a.calcage();


**Loops and Iteration

-> for loop

for(var i=0;i<10;i++)
{
	console.log(i);
}


-> While Loop

var i=0;
while(i<10)
{
	console.log(i);
	i++;
}


-> break : It terminates the loop
-> continue : It skipped the current value and move to next one.


That's all for today!

Thank you!

Spread Learning ^_^