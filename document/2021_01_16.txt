Hey! there?
-> Ayush this side ..

Today we will move further in js..


**First Class Function

-> A function is an instance of the Object type.
-> A function behaves like any other object.
-> We can store function in a variable.
-> We can pass a function as an argument to another function.
-> We can return a function from a function.

---------------------------------------------------------------


**Function can accept other function as arguments.

var add = function(a,b){
	return a+b;
}

var sub = function(a,b){
	return a-b;
}

var combine = function(func){
	var x =3;
	var y =2;
	return func(x,y);
}

console.log(combine(add));  //output: 5
console.log(combine(sub));  //output: 1



**Function returning another function

function add(job){
	if(job === 'designer'){
		return function(name){
			console.log(name + ' is a designer');
	   	}
	}
	else if(job === 'teacher'){
		return function(name){
			console.log(name + ' is a teacher');
		}
	}
	else{
		return function(name){
			console.log('Hello! ' + name);
		}
	}
}

var a = add('teacher');
a('Ayush');  //output : Ayush is a teacher


b('designer')('Aman'); //outpur : Aman is a designer



**Immediate Invoked Function Expression(IIFE)

-> When you don't have any name for the function,but you want to execute one...

(function () {
	var a = Math.random()*10;
	console.log(a >= 5);
})();



**Closures

-> It means than an inner function always has access to the variables and parameters of the outer function,even after the outer function has returned.

-> For every closure we have three scopes:
	-> Local Scope (Own Scope)
	-> Outer Function Scope (Function inside function - inner function can access scope of outer function)
	-> Global Scope

Example :

var i = 10
function show(){
	var j-20;
	console.log(j);
	console.log(i);	  //So, you can able to access global variable i.e, 'i' - it is known as closure.
}
show();

note : closure function is nested function and vice versa.


function show(){
	var j = 10;
	console.log(j);
	function innerShow(){
		int k = 20;
		console.log(k);
		console.log(j); //So, when you access outer function variable into the inner function - then it is known as closure.
	}
	innerShow();
}
show();

note : Outer function cannot access variable of inner but vice versa is possible.
       When inner function preserves the data of outer function then closure is called.


-----------------------------------------------------------------

**Bind Method

-> Doesn't accepts additional parameters.
-> Make a copy of a fuction which is to be called on.


var student = {
	details : function(){
		return this.name + " " + this.id;
	}
}

var stud1 = {
	name:"A";
	id:"120";
}

var stud2 = {
	name:"B";
	id:"240";
}

var stud = student.details.bind(stud2); // Output : B 240

---------------------------------------------------------------


**Call Method

-> It is used to write methods for different objects.
-> It calls the method, taking the owner object as argument.
-> The keyword "this" refers to the 'owner' object.

var student = {
	details : function(){
		return this.name + " " + this.id;
	}
}

var stud1 = {
	name:"A";
	id:"120";
}

var stud2 = {
	name:"B";
	id:"240";
}

student.details.call(stud1); //output : A 120

------------------------------------------------------

var student = {
	details : function(classs){
		return this.name + " " + this.id + " " + this.classs;
	}
}

var stud1 = {
	name:"A";
	id:"120";
}

var stud2 = {
	name:"B";
	id:"240";
}

student.details.call(stud2,"TC3"); //output : B 240 TC3

--------------------------------------------------------------------



**Apply Method

-> It serves the exact same purpose like call().
-> The only difference between two is that call() expects all parameters to be passed in 
   individually, whereas apply() expects an array of all of our parameters.

var student = {
	details : function(class,section){
		return this.name + " " + this.id + " " + this.classs+ " "+this.section;
	}
}

var stud1 = {
	name:"A";
	id:"120";
}

var stud2 = {
	name:"B";
	id:"240";
}

student.details.apply(stud2,["TC3","D"]); //output : B 240 TC3 D

------------------------------------------------------------------------


**ES6 - new version of js.

New features :

-> let and const
-> Blocks and IIFEs
-> Strings
-> Arrow functions
-> Destructing
-> Arrays
-> The Spread Operator
-> Rest and Default Parameters
-> Maps
-> Classes and Subclasses


-------------------------------------------------------------


**let and const


-> let variable are block scoped - which means can't be accesible outside curly braces.
-> Let can be updated but not re-declared.


let a = 5;
if(a>10)
{
	let b = 10;
	console.log(b); //output : 10
}
console.log(b); //output : b is not defined

-------------------------------------------

let a = 5;
a = 10; //this is allowed

--------------------------------------

let a =5;
let a = 10; //a is already being declared.

---------------------------------------

let a = 5;
if(a>10)
{
	let b = 10;
	console.log(b); //output : 10
}
console.log(a); //output : 5 (this is accessible)

---------------------------------------------------


-> const declaretions are block scoped
-> const cannot be updated or re-declared.
-> const object cannot be updated but the properties of this objects can be updated.


const greeting = {
	message:"Say Hi",
	times:4;
}


greeting = {		|
	words:"Hello",	| -> Not possible
	number:"five"	|
}

greeting.message="Say Hello Instead";  |-> Possible


-----------------------------------------------------------

**Strings

-> Earlier

let firstName = 'Ayush';
let lastName = 'Raikundaliya';

console.log(firstName + ' ' + lastName);

-> Now

console.log('Hey! My name is ${firstName} ${lastName}.');			




That's all for today!!

Thank you.
Spread Learning ^_^